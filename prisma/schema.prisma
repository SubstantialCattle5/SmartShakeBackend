// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  phone       String   @unique
  email       String?  @unique
  name        String?
  password    String?  // Optional for OTP-only users
  isVerified  Boolean  @default(false)
  qrCode      String?  @unique  // QR code for vending machine access
  isActive    Boolean  @default(true)
  role        UserRole @default(USER)  // USER, ADMIN, TECH
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  otpCodes    OtpCode[]
  blacklistedTokens BlacklistedToken[]
  
  // Subscription Relations
  subscriptions     UserSubscription[]
  orders            Order[]
  drinkConsumptions DrinkConsumption[]
  paymentMethods    PaymentMethod[]
  transactions      Transaction[]
  
  // Feedback Relations
  feedbacks         Feedback[]
  feedbackResponses FeedbackResponse[]

  @@map("users")
  @@index([role])
  @@index([isActive, role])
}

model OtpCode {
  id        Int      @id @default(autoincrement())
  phone     String
  code      String
  purpose   OtpPurpose @default(LOGIN)
  expiresAt DateTime
  used      Boolean  @default(false)
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("otp_codes")
  @@index([phone, purpose])
  @@index([code])
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  tokenHash String   @unique  // Hash of the JWT token for security
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime // When the original token expires
  reason    String?  // Optional reason for blacklisting (logout, security, etc.)
  createdAt DateTime @default(now())

  @@map("blacklisted_tokens")
  @@index([tokenHash])
  @@index([userId])
  @@index([expiresAt])
}

// ========================================
// PRODUCT MODELS (Basic Info for Packages)
// ========================================

model DrinkProduct {
  id          Int      @id @default(autoincrement())
  name        String   // e.g., "Energy Boost", "Hydration Pro"
  description String?
  flavor      String   // e.g., "Mango", "Berry", "Citrus"
  sizeML      Int      // Volume in ML (e.g., 500, 750)
  unitPrice   Decimal  @db.Decimal(10, 2)  // Price per individual drink
  imageUrl    String?
  isActive    Boolean  @default(true)
  nutritionInfo Json?  // Calories, protein, etc.
  averageRating Decimal? @db.Decimal(3, 2)  // Average user rating (1.00-5.00)
  totalReviews  Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  packageItems      PackageItem[]
  drinkConsumptions DrinkConsumption[]
  orderItems        OrderItem[]
  feedbacks         Feedback[]

  @@map("drink_products")
  @@index([isActive])
  @@index([averageRating])
}

// ========================================
// SUBSCRIPTION PACKAGE MODELS
// ========================================

model SubscriptionPackage {
  id              Int      @id @default(autoincrement())
  name            String   @unique  // e.g., "20 Drink Power Pack", "Monthly Hydration"
  description     String?
  totalPrice      Decimal  @db.Decimal(10, 2)  // Package price (e.g., ₹500 for 20 drinks)
  originalPrice   Decimal  @db.Decimal(10, 2)  // Individual price sum (e.g., ₹600)
  savingsAmount   Decimal  @db.Decimal(10, 2)  // originalPrice - totalPrice
  validityDays    Int      // How long package is valid (e.g., 30 days)
  isActive        Boolean  @default(true)
  category        String?  // e.g., "gym", "office", "student"
  averageRating   Decimal? @db.Decimal(3, 2)  // Average package rating
  totalReviews    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  packageItems  PackageItem[]
  subscriptions UserSubscription[]
  feedbacks     Feedback[]

  @@map("subscription_packages")
  @@index([isActive])
  @@index([category])
}

model PackageItem {
  id        Int      @id @default(autoincrement())
  packageId Int
  package   SubscriptionPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  productId Int
  product   DrinkProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      // Number of this drink in the package
  createdAt DateTime @default(now())

  @@map("package_items")
  @@unique([packageId, productId])
}

model UserSubscription {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  packageId         Int
  package           SubscriptionPackage @relation(fields: [packageId], references: [id])
  status            SubscriptionStatus @default(ACTIVE)
  startDate         DateTime
  expiryDate        DateTime  // Based on package validity
  totalDrinks       Int      // Total drinks in package
  consumedDrinks    Int      @default(0)
  remainingDrinks   Int      // totalDrinks - consumedDrinks (computed)
  qrCodeGenerated   Boolean  @default(false)
  qrCodeValue       String?  // Actual QR code value for vending machine
  purchaseDate      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  drinkConsumptions DrinkConsumption[]
  order             Order?   @relation(fields: [orderId], references: [id])
  orderId           Int?
  feedbacks         Feedback[]

  @@map("user_subscriptions")
  @@index([userId, status])
  @@index([expiryDate])
  @@index([qrCodeValue])
}

// ========================================
// CONSUMPTION TRACKING (For Subscription Management)
// ========================================

model DrinkConsumption {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionId Int
  subscription   UserSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  productId      Int
  product        DrinkProduct @relation(fields: [productId], references: [id])
  
  // Basic info (detailed machine info handled by other backend)
  machineId      String?  // Reference to machine (not FK since different DB)
  quantity       Int      @default(1)
  consumedAt     DateTime @default(now())
  
  // Integration fields
  externalTransactionId String? // Transaction ID from vending machine backend
  status         ConsumptionStatus @default(COMPLETED)
  
  @@map("drink_consumptions")
  @@index([userId, consumedAt])
  @@index([subscriptionId])
  @@index([externalTransactionId])
}

// ========================================
// FEEDBACK SYSTEM
// ========================================

model Feedback {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Feedback can be about different entities
  feedbackType FeedbackType
  productId    Int?     // Feedback about specific drink
  product      DrinkProduct? @relation(fields: [productId], references: [id])
  packageId    Int?     // Feedback about subscription package
  package      SubscriptionPackage? @relation(fields: [packageId], references: [id])
  subscriptionId Int?   // Feedback about user's subscription experience
  subscription UserSubscription? @relation(fields: [subscriptionId], references: [id])
  machineId    String? // Feedback about specific vending machine
  
  // Feedback content
  rating       Int      // 1-5 star rating
  title        String?  // Brief title
  comment      String   // Detailed feedback
  category     FeedbackCategory // QUALITY, SERVICE, TECHNICAL, etc.
  priority     FeedbackPriority @default(MEDIUM)
  status       FeedbackStatus @default(NEW)
  
  // Metadata
  isAnonymous  Boolean  @default(false)
  deviceInfo   Json?    // App version, device type, etc.
  location     String?  // Where feedback was given
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  responses    FeedbackResponse[]
  attachments  FeedbackAttachment[]

  @@map("feedbacks")
  @@index([userId, status])
  @@index([feedbackType, status])
  @@index([rating, createdAt])
  @@index([category, priority])
}

model FeedbackResponse {
  id         Int      @id @default(autoincrement())
  feedbackId Int
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  responderId Int      // Admin/Tech user who responded
  responder  User     @relation(fields: [responderId], references: [id])
  
  message    String   // Response message
  isInternal Boolean  @default(false)  // Internal note or customer-facing response
  actionTaken String? // What action was taken
  
  createdAt  DateTime @default(now())

  @@map("feedback_responses")
  @@index([feedbackId])
  @@index([responderId])
}

model FeedbackAttachment {
  id         Int      @id @default(autoincrement())
  feedbackId Int
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  
  fileName   String
  fileUrl    String   // S3 or cloud storage URL
  fileType   String   // image, video, document
  fileSize   Int?     // Size in bytes
  
  createdAt  DateTime @default(now())

  @@map("feedback_attachments")
  @@index([feedbackId])
}

// ========================================
// ORDER & PAYMENT MODELS
// ========================================

model Order {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderNumber     String   @unique  // e.g., "ORD-2024-001"
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal  @db.Decimal(10, 2)
  paymentStatus   PaymentStatus @default(PENDING)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  orderItems      OrderItem[]
  subscriptions   UserSubscription[]
  transactions    Transaction[]

  @@map("orders")
  @@index([userId, status])
  @@index([status, createdAt])
  @@index([paymentStatus])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int?    // Individual drink purchase
  product   DrinkProduct? @relation(fields: [productId], references: [id])
  packageId Int?    // Package purchase (reference, not FK since different table)
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)
  itemType  OrderItemType  // INDIVIDUAL_DRINK or PACKAGE

  @@map("order_items")
  @@index([orderId])
}

model PaymentMethod {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type         PaymentType
  provider     String   @default("phonepe")  // PhonePe integration
  externalId   String?  // PhonePe payment method ID
  isDefault    Boolean  @default(false)
  lastFour     String?  // Last 4 digits for cards
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  transactions Transaction[]

  @@map("payment_methods")
  @@index([userId, isDefault])
}

model Transaction {
  id                    Int           @id @default(autoincrement())
  userId                Int
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderId               Int?
  order                 Order?        @relation(fields: [orderId], references: [id])
  paymentMethodId       Int?
  paymentMethod         PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  status                TransactionStatus @default(PENDING)
  type                  TransactionType @default(PAYMENT)
  amount                Decimal       @db.Decimal(10, 2)
  currency              String        @default("INR")
  
  // PhonePe Integration Fields
  phonepeTransactionId  String?       // PhonePe transaction ID
  phonepeOrderId        String?       // PhonePe order ID
  phonepeMerchantId     String?       // Merchant transaction ID
  phonepeResponse       Json?         // Full PhonePe response
  phonepeCallbackData   Json?         // Callback webhook data
  
  failureReason         String?
  processedAt           DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@map("transactions")
  @@index([userId, status])
  @@index([status, processedAt])
  @@index([phonepeTransactionId])
  @@index([phonepeMerchantId])
}

// ========================================
// INTEGRATION MODELS (For External Systems)
// ========================================

model VendingMachineReference {
  id          Int      @id @default(autoincrement())
  machineId   String   @unique  // External machine ID from vending backend
  name        String   // Machine display name
  location    String   // Location description
  city        String
  isActive    Boolean  @default(true)
  averageRating Decimal? @db.Decimal(3, 2)  // Average machine rating
  totalReviews  Int     @default(0)
  lastSync    DateTime? // Last sync with vending backend
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("vending_machine_references")
  @@index([city])
  @@index([isActive])
}

// ========================================
// ENUMS
// ========================================

enum OtpPurpose {
  LOGIN
  REGISTRATION
  PASSWORD_RESET
}

enum UserRole {
  USER        // Regular customers
  TECH        // Technical support staff
  ADMIN       // System administrators
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  CANCELLED
}

enum ConsumptionStatus {
  COMPLETED
  FAILED
  PENDING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderItemType {
  INDIVIDUAL_DRINK
  PACKAGE
}

enum PaymentType {
  UPI
  CREDIT_CARD
  DEBIT_CARD
  NET_BANKING
  WALLET
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
}

enum TransactionType {
  PAYMENT
  REFUND
  ADJUSTMENT
}

enum FeedbackType {
  PRODUCT       // About specific drink
  PACKAGE       // About subscription package
  MACHINE       // About vending machine
  SERVICE       // About overall service
  SUBSCRIPTION  // About subscription experience
  APP           // About mobile app
  GENERAL       // General feedback
}

enum FeedbackCategory {
  QUALITY       // Product quality issues
  SERVICE       // Customer service
  TECHNICAL     // Technical/app issues
  PRICING       // Pricing concerns
  DELIVERY      // Machine availability/reliability
  FEATURE_REQUEST // New feature suggestions
  COMPLAINT     // General complaints
  COMPLIMENT    // Positive feedback
}

enum FeedbackPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum FeedbackStatus {
  NEW           // Just submitted
  ACKNOWLEDGED  // Seen by support team
  IN_PROGRESS   // Being worked on
  RESOLVED      // Issue fixed
  CLOSED        // Feedback closed
  REOPENED      // Reopened after being closed
} 